import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;

public class MazeNavigator extends Thread implements Runnable {
    private static int currentRow = 4;
    private static int currentColumn = 4;
    private static int moveNumber = 0;
    private static boolean started = false;
    private static char[][] maze = new char[10][10];
    private int playerNumber;
    private String fileName;
    private int[][] moves;
    private String direction;
    private static Object lock = new Object();

    private static synchronized void startMazeNavigation() {
        started = true;
    }

    private static synchronized void stopMazeNavigation() {
        started = false;
    }

    private static synchronized boolean getStatusOftMazeNavigation() {
        return started;
    }

    private static synchronized int getMoveNumber() {
        return moveNumber;
    }

    private static synchronized void incrementMoveNumber() {
        moveNumber++;
    }

    public int[][] loadFiles(File file) {
        try {
            FileReader frCount = new FileReader(file);
            BufferedReader brCount = new BufferedReader(frCount);
            int lines = 0;
            while (brCount.readLine() != null) lines++;
            String line;
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            int i = 0;
            int[][] tempArray = new int[lines][1];
            while ((line = br.readLine()) != null) {
                tempArray[i][0] = Integer.valueOf(line);
                i++;
            }
            br.close();
            brCount.close();
            fr.close();
            frCount.close();
            return tempArray;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public MazeNavigator(int playerNumber, String fileName) {
        this.playerNumber = playerNumber;
        this.fileName = fileName;
        this.moves = loadFiles(new File(fileName));
    }

    public static void generateMaze() {
        for (int i = 0; i < 10; i++){
            for (int j = 0; j < 10; j++){
                maze[i][j] = ' ';
                if(i==currentRow && j ==currentColumn) {
                    maze[i][j] = 'X';
                }
            }
        }
    }

    public static  void printInitialMaze() {
        for (int i = 0; i < maze.length; i++) {
            System.out.println(Arrays.toString(maze[i]));
        }
    }

    public static synchronized void printMazeDetails(int playerNumber, String direction) {
        System.out.println("Move number: " +  getMoveNumber());
        System.out.println("Player: " + playerNumber);
        System.out.println("Move: " + direction);
        for (int i = 0; i < maze.length; i++) {
            System.out.println(Arrays.toString(maze[i]));
        }
    }

    public String getDirection(int move) {
        if(move == 1) {
            direction = "Left";
        } else if(move == 2) {
            direction = "Right";
        } else if(move == 3) {
            direction = "Up";
        } else if(move == 4) {
            direction = "Down";
        }
        return direction;
    }

    public void run() {

        while(getStatusOftMazeNavigation()) {
            Thread.yield();
        }
        startMazeNavigation();

        for (int i = 0; i < moves.length; i++) {
            incrementMoveNumber();

            if(! (moves[i][0] == 1 || moves[i][0] == 2 || moves[i][0] == 3  || moves[i][0] == 4 )) {
                System.out.println("Error, invalid input!");
                continue;
            }
            //1-left
            if (moves[i][0] == 1) {
                synchronized (lock) {
                    maze[currentRow][currentColumn] = ' ';
                    currentColumn --;
                    maze[currentRow][currentColumn] = 'X';
                }
            } else if (moves[i][0] == 2) { //2- Right
                synchronized (lock) {
                    maze[currentRow][currentColumn] = ' ';
                    currentColumn ++;
                    maze[currentRow][currentColumn] = 'X';
                }
            } else if (moves[i][0] == 3) { //3- Up
                synchronized (lock) {
                    maze[currentRow][currentColumn] = ' ';
                    currentRow --;
                    maze[currentRow][currentColumn] = 'X';
                }
            } else if (moves[i][0] == 4) { //4 - Down
                synchronized (lock) {
                    maze[currentRow][currentColumn] = ' ';
                    currentRow ++;
                    maze[currentRow][currentColumn] = 'X';
                }
            }
            printMazeDetails(playerNumber, getDirection(moves[i][0]));
            stopMazeNavigation();
        }
    }

    public static void main(String[] args) {
        System.out.println("Welcome! Initial Maze:");

        MazeNavigator.generateMaze();
        MazeNavigator.printInitialMaze();

        MazeNavigator playerOne = new MazeNavigator
                (1, "/Users/samhitha/IdeaProjects/exam/src/PlayerOneMoves.txt");

        MazeNavigator playerTwo = new MazeNavigator
                (2, "/Users/samhitha/IdeaProjects/exam/src/PlayerTwoMoves.txt");

        Thread one = new Thread(playerOne);
        one.start();
        Thread two = new Thread(playerTwo);
        two.start();

        try {
            one.join();
            two.join();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }
    }
}
